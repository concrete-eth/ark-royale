/* Autogenerated file. Do not edit manually. */

package datamod

import (
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/concrete/codegen/datamod/codec"
	"github.com/ethereum/go-ethereum/concrete/crypto"
	"github.com/ethereum/go-ethereum/concrete/lib"
	"github.com/holiman/uint256"
)

// Reference imports to suppress errors if they are not used.
var (
	_ = common.Big1
	_ = codec.EncodeAddress
	_ = uint256.NewInt
)

// var (
//	UnitPrototypesDefaultKey = crypto.Keccak256([]byte("datamod.v1.UnitPrototypes"))
// )

func UnitPrototypesDefaultKey() []byte {
	return crypto.Keccak256([]byte("datamod.v1.UnitPrototypes"))
}

type UnitPrototypesRow struct {
	lib.DatastoreStructWithParent
}

func NewUnitPrototypesRow(dsSlot lib.DatastoreSlot) *UnitPrototypesRow {
	sizes := []int{1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}
	return &UnitPrototypesRow{*lib.NewDatastoreStructWithParent(dsSlot, sizes, nil, nil)}
}

func NewUnitPrototypesRowWithParent(dsSlot lib.DatastoreSlot, parent lib.Parent, rowKey lib.RowKey) *UnitPrototypesRow {
	sizes := []int{1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}
	return &UnitPrototypesRow{*lib.NewDatastoreStructWithParent(dsSlot, sizes, parent, rowKey)}
}

func (v *UnitPrototypesRow) Get() (
	layer uint8,
	resourceCost uint16,
	computeCost uint8,
	spawnTime uint8,
	maxIntegrity uint8,
	landStrength uint8,
	hoverStrength uint8,
	airStrength uint8,
	attackRange uint8,
	attackCooldown uint8,
	isAssault bool,
	isWorker bool,
) {
	return codec.DecodeUint8(1, v.GetField(0)),
		codec.DecodeUint16(2, v.GetField(1)),
		codec.DecodeUint8(1, v.GetField(2)),
		codec.DecodeUint8(1, v.GetField(3)),
		codec.DecodeUint8(1, v.GetField(4)),
		codec.DecodeUint8(1, v.GetField(5)),
		codec.DecodeUint8(1, v.GetField(6)),
		codec.DecodeUint8(1, v.GetField(7)),
		codec.DecodeUint8(1, v.GetField(8)),
		codec.DecodeUint8(1, v.GetField(9)),
		codec.DecodeBool(1, v.GetField(10)),
		codec.DecodeBool(1, v.GetField(11))
}

func (v *UnitPrototypesRow) Set(
	layer uint8,
	resourceCost uint16,
	computeCost uint8,
	spawnTime uint8,
	maxIntegrity uint8,
	landStrength uint8,
	hoverStrength uint8,
	airStrength uint8,
	attackRange uint8,
	attackCooldown uint8,
	isAssault bool,
	isWorker bool,
) {
	v.SetField(0, codec.EncodeUint8(1, layer))
	v.SetField(1, codec.EncodeUint16(2, resourceCost))
	v.SetField(2, codec.EncodeUint8(1, computeCost))
	v.SetField(3, codec.EncodeUint8(1, spawnTime))
	v.SetField(4, codec.EncodeUint8(1, maxIntegrity))
	v.SetField(5, codec.EncodeUint8(1, landStrength))
	v.SetField(6, codec.EncodeUint8(1, hoverStrength))
	v.SetField(7, codec.EncodeUint8(1, airStrength))
	v.SetField(8, codec.EncodeUint8(1, attackRange))
	v.SetField(9, codec.EncodeUint8(1, attackCooldown))
	v.SetField(10, codec.EncodeBool(1, isAssault))
	v.SetField(11, codec.EncodeBool(1, isWorker))
}

func (v *UnitPrototypesRow) GetLayer() uint8 {
	data := v.GetField(0)
	return codec.DecodeUint8(1, data)
}

func (v *UnitPrototypesRow) SetLayer(value uint8) {
	data := codec.EncodeUint8(1, value)
	v.SetField(0, data)
}

func (v *UnitPrototypesRow) GetResourceCost() uint16 {
	data := v.GetField(1)
	return codec.DecodeUint16(2, data)
}

func (v *UnitPrototypesRow) SetResourceCost(value uint16) {
	data := codec.EncodeUint16(2, value)
	v.SetField(1, data)
}

func (v *UnitPrototypesRow) GetComputeCost() uint8 {
	data := v.GetField(2)
	return codec.DecodeUint8(1, data)
}

func (v *UnitPrototypesRow) SetComputeCost(value uint8) {
	data := codec.EncodeUint8(1, value)
	v.SetField(2, data)
}

func (v *UnitPrototypesRow) GetSpawnTime() uint8 {
	data := v.GetField(3)
	return codec.DecodeUint8(1, data)
}

func (v *UnitPrototypesRow) SetSpawnTime(value uint8) {
	data := codec.EncodeUint8(1, value)
	v.SetField(3, data)
}

func (v *UnitPrototypesRow) GetMaxIntegrity() uint8 {
	data := v.GetField(4)
	return codec.DecodeUint8(1, data)
}

func (v *UnitPrototypesRow) SetMaxIntegrity(value uint8) {
	data := codec.EncodeUint8(1, value)
	v.SetField(4, data)
}

func (v *UnitPrototypesRow) GetLandStrength() uint8 {
	data := v.GetField(5)
	return codec.DecodeUint8(1, data)
}

func (v *UnitPrototypesRow) SetLandStrength(value uint8) {
	data := codec.EncodeUint8(1, value)
	v.SetField(5, data)
}

func (v *UnitPrototypesRow) GetHoverStrength() uint8 {
	data := v.GetField(6)
	return codec.DecodeUint8(1, data)
}

func (v *UnitPrototypesRow) SetHoverStrength(value uint8) {
	data := codec.EncodeUint8(1, value)
	v.SetField(6, data)
}

func (v *UnitPrototypesRow) GetAirStrength() uint8 {
	data := v.GetField(7)
	return codec.DecodeUint8(1, data)
}

func (v *UnitPrototypesRow) SetAirStrength(value uint8) {
	data := codec.EncodeUint8(1, value)
	v.SetField(7, data)
}

func (v *UnitPrototypesRow) GetAttackRange() uint8 {
	data := v.GetField(8)
	return codec.DecodeUint8(1, data)
}

func (v *UnitPrototypesRow) SetAttackRange(value uint8) {
	data := codec.EncodeUint8(1, value)
	v.SetField(8, data)
}

func (v *UnitPrototypesRow) GetAttackCooldown() uint8 {
	data := v.GetField(9)
	return codec.DecodeUint8(1, data)
}

func (v *UnitPrototypesRow) SetAttackCooldown(value uint8) {
	data := codec.EncodeUint8(1, value)
	v.SetField(9, data)
}

func (v *UnitPrototypesRow) GetIsAssault() bool {
	data := v.GetField(10)
	return codec.DecodeBool(1, data)
}

func (v *UnitPrototypesRow) SetIsAssault(value bool) {
	data := codec.EncodeBool(1, value)
	v.SetField(10, data)
}

func (v *UnitPrototypesRow) GetIsWorker() bool {
	data := v.GetField(11)
	return codec.DecodeBool(1, data)
}

func (v *UnitPrototypesRow) SetIsWorker(value bool) {
	data := codec.EncodeBool(1, value)
	v.SetField(11, data)
}

type UnitPrototypes struct {
	dsSlot  lib.DatastoreSlot
	parent  lib.Parent
	tableId lib.TableId
}

func NewUnitPrototypes(ds lib.Datastore) *UnitPrototypes {
	dsSlot := ds.Get(UnitPrototypesDefaultKey())
	return &UnitPrototypes{
		dsSlot:  dsSlot,
		parent:  nil,
		tableId: nil,
	}
}

func NewUnitPrototypesWithParent(ds lib.Datastore, parent lib.Parent, tableId lib.TableId) *UnitPrototypes {
	t := NewUnitPrototypes(ds)
	t.parent = parent
	t.tableId = tableId
	return t
}

func NewUnitPrototypesFromSlot(dsSlot lib.DatastoreSlot) *UnitPrototypes {
	return &UnitPrototypes{dsSlot: dsSlot}
}

func (m *UnitPrototypes) Get(
	unitType uint8,
) *UnitPrototypesRow {
	dsSlot := m.dsSlot.Mapping().GetNested(
		codec.EncodeUint8(1, unitType),
	)
	return NewUnitPrototypesRowWithParent(dsSlot, m, lib.RowKey{
		unitType,
	})
}

func (m *UnitPrototypes) SetFieldCallback(tableId lib.TableId, rowKey lib.RowKey, columnIndex int, value []byte) {
	if m.parent != nil {
		m.parent.SetFieldCallback(m.tableId, rowKey, columnIndex, value)
	}
}
