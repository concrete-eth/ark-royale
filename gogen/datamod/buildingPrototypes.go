/* Autogenerated file. Do not edit manually. */

package datamod

import (
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/concrete/codegen/datamod/codec"
	"github.com/ethereum/go-ethereum/concrete/crypto"
	"github.com/ethereum/go-ethereum/concrete/lib"
	"github.com/holiman/uint256"
)

// Reference imports to suppress errors if they are not used.
var (
	_ = common.Big1
	_ = codec.EncodeAddress
	_ = uint256.NewInt
)

// var (
//	BuildingPrototypesDefaultKey = crypto.Keccak256([]byte("datamod.v1.BuildingPrototypes"))
// )

func BuildingPrototypesDefaultKey() []byte {
	return crypto.Keccak256([]byte("datamod.v1.BuildingPrototypes"))
}

type BuildingPrototypesRow struct {
	lib.DatastoreStructWithParent
}

func NewBuildingPrototypesRow(dsSlot lib.DatastoreSlot) *BuildingPrototypesRow {
	sizes := []int{1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1}
	return &BuildingPrototypesRow{*lib.NewDatastoreStructWithParent(dsSlot, sizes, nil, nil)}
}

func NewBuildingPrototypesRowWithParent(dsSlot lib.DatastoreSlot, parent lib.Parent, rowKey lib.RowKey) *BuildingPrototypesRow {
	sizes := []int{1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1}
	return &BuildingPrototypesRow{*lib.NewDatastoreStructWithParent(dsSlot, sizes, parent, rowKey)}
}

func (v *BuildingPrototypesRow) Get() (
	width uint8,
	height uint8,
	resourceCost uint16,
	resourceCapacity uint16,
	computeCapacity uint8,
	resourceMine uint8,
	mineTime uint8,
	maxIntegrity uint8,
	buildingTime uint8,
	isArmory bool,
	isEnvironment bool,
) {
	return codec.DecodeUint8(1, v.GetField(0)),
		codec.DecodeUint8(1, v.GetField(1)),
		codec.DecodeUint16(2, v.GetField(2)),
		codec.DecodeUint16(2, v.GetField(3)),
		codec.DecodeUint8(1, v.GetField(4)),
		codec.DecodeUint8(1, v.GetField(5)),
		codec.DecodeUint8(1, v.GetField(6)),
		codec.DecodeUint8(1, v.GetField(7)),
		codec.DecodeUint8(1, v.GetField(8)),
		codec.DecodeBool(1, v.GetField(9)),
		codec.DecodeBool(1, v.GetField(10))
}

func (v *BuildingPrototypesRow) Set(
	width uint8,
	height uint8,
	resourceCost uint16,
	resourceCapacity uint16,
	computeCapacity uint8,
	resourceMine uint8,
	mineTime uint8,
	maxIntegrity uint8,
	buildingTime uint8,
	isArmory bool,
	isEnvironment bool,
) {
	v.SetField(0, codec.EncodeUint8(1, width))
	v.SetField(1, codec.EncodeUint8(1, height))
	v.SetField(2, codec.EncodeUint16(2, resourceCost))
	v.SetField(3, codec.EncodeUint16(2, resourceCapacity))
	v.SetField(4, codec.EncodeUint8(1, computeCapacity))
	v.SetField(5, codec.EncodeUint8(1, resourceMine))
	v.SetField(6, codec.EncodeUint8(1, mineTime))
	v.SetField(7, codec.EncodeUint8(1, maxIntegrity))
	v.SetField(8, codec.EncodeUint8(1, buildingTime))
	v.SetField(9, codec.EncodeBool(1, isArmory))
	v.SetField(10, codec.EncodeBool(1, isEnvironment))
}

func (v *BuildingPrototypesRow) GetWidth() uint8 {
	data := v.GetField(0)
	return codec.DecodeUint8(1, data)
}

func (v *BuildingPrototypesRow) SetWidth(value uint8) {
	data := codec.EncodeUint8(1, value)
	v.SetField(0, data)
}

func (v *BuildingPrototypesRow) GetHeight() uint8 {
	data := v.GetField(1)
	return codec.DecodeUint8(1, data)
}

func (v *BuildingPrototypesRow) SetHeight(value uint8) {
	data := codec.EncodeUint8(1, value)
	v.SetField(1, data)
}

func (v *BuildingPrototypesRow) GetResourceCost() uint16 {
	data := v.GetField(2)
	return codec.DecodeUint16(2, data)
}

func (v *BuildingPrototypesRow) SetResourceCost(value uint16) {
	data := codec.EncodeUint16(2, value)
	v.SetField(2, data)
}

func (v *BuildingPrototypesRow) GetResourceCapacity() uint16 {
	data := v.GetField(3)
	return codec.DecodeUint16(2, data)
}

func (v *BuildingPrototypesRow) SetResourceCapacity(value uint16) {
	data := codec.EncodeUint16(2, value)
	v.SetField(3, data)
}

func (v *BuildingPrototypesRow) GetComputeCapacity() uint8 {
	data := v.GetField(4)
	return codec.DecodeUint8(1, data)
}

func (v *BuildingPrototypesRow) SetComputeCapacity(value uint8) {
	data := codec.EncodeUint8(1, value)
	v.SetField(4, data)
}

func (v *BuildingPrototypesRow) GetResourceMine() uint8 {
	data := v.GetField(5)
	return codec.DecodeUint8(1, data)
}

func (v *BuildingPrototypesRow) SetResourceMine(value uint8) {
	data := codec.EncodeUint8(1, value)
	v.SetField(5, data)
}

func (v *BuildingPrototypesRow) GetMineTime() uint8 {
	data := v.GetField(6)
	return codec.DecodeUint8(1, data)
}

func (v *BuildingPrototypesRow) SetMineTime(value uint8) {
	data := codec.EncodeUint8(1, value)
	v.SetField(6, data)
}

func (v *BuildingPrototypesRow) GetMaxIntegrity() uint8 {
	data := v.GetField(7)
	return codec.DecodeUint8(1, data)
}

func (v *BuildingPrototypesRow) SetMaxIntegrity(value uint8) {
	data := codec.EncodeUint8(1, value)
	v.SetField(7, data)
}

func (v *BuildingPrototypesRow) GetBuildingTime() uint8 {
	data := v.GetField(8)
	return codec.DecodeUint8(1, data)
}

func (v *BuildingPrototypesRow) SetBuildingTime(value uint8) {
	data := codec.EncodeUint8(1, value)
	v.SetField(8, data)
}

func (v *BuildingPrototypesRow) GetIsArmory() bool {
	data := v.GetField(9)
	return codec.DecodeBool(1, data)
}

func (v *BuildingPrototypesRow) SetIsArmory(value bool) {
	data := codec.EncodeBool(1, value)
	v.SetField(9, data)
}

func (v *BuildingPrototypesRow) GetIsEnvironment() bool {
	data := v.GetField(10)
	return codec.DecodeBool(1, data)
}

func (v *BuildingPrototypesRow) SetIsEnvironment(value bool) {
	data := codec.EncodeBool(1, value)
	v.SetField(10, data)
}

type BuildingPrototypes struct {
	dsSlot  lib.DatastoreSlot
	parent  lib.Parent
	tableId lib.TableId
}

func NewBuildingPrototypes(ds lib.Datastore) *BuildingPrototypes {
	dsSlot := ds.Get(BuildingPrototypesDefaultKey())
	return &BuildingPrototypes{
		dsSlot:  dsSlot,
		parent:  nil,
		tableId: nil,
	}
}

func NewBuildingPrototypesWithParent(ds lib.Datastore, parent lib.Parent, tableId lib.TableId) *BuildingPrototypes {
	t := NewBuildingPrototypes(ds)
	t.parent = parent
	t.tableId = tableId
	return t
}

func NewBuildingPrototypesFromSlot(dsSlot lib.DatastoreSlot) *BuildingPrototypes {
	return &BuildingPrototypes{dsSlot: dsSlot}
}

func (m *BuildingPrototypes) Get(
	buildingType uint8,
) *BuildingPrototypesRow {
	dsSlot := m.dsSlot.Mapping().GetNested(
		codec.EncodeUint8(1, buildingType),
	)
	return NewBuildingPrototypesRowWithParent(dsSlot, m, lib.RowKey{
		buildingType,
	})
}

func (m *BuildingPrototypes) SetFieldCallback(tableId lib.TableId, rowKey lib.RowKey, columnIndex int, value []byte) {
	if m.parent != nil {
		m.parent.SetFieldCallback(m.tableId, rowKey, columnIndex, value)
	}
}
