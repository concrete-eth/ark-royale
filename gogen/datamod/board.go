/* Autogenerated file. Do not edit manually. */

package datamod

import (
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/concrete/codegen/datamod/codec"
	"github.com/ethereum/go-ethereum/concrete/crypto"
	"github.com/ethereum/go-ethereum/concrete/lib"
	"github.com/holiman/uint256"
)

// Reference imports to suppress errors if they are not used.
var (
	_ = common.Big1
	_ = codec.EncodeAddress
	_ = uint256.NewInt
)

// var (
//	BoardDefaultKey = crypto.Keccak256([]byte("datamod.v1.Board"))
// )

func BoardDefaultKey() []byte {
	return crypto.Keccak256([]byte("datamod.v1.Board"))
}

type BoardRow struct {
	lib.DatastoreStruct
}

func NewBoardRow(dsSlot lib.DatastoreSlot) *BoardRow {
	sizes := []int{1, 1, 1, 1, 1, 1, 1}
	return &BoardRow{*lib.NewDatastoreStruct(dsSlot, sizes)}
}

func (v *BoardRow) Get() (
	landObjectType uint8,
	landPlayerId uint8,
	landObjectId uint8,
	hoverPlayerId uint8,
	hoverUnitId uint8,
	airPlayerId uint8,
	airUnitId uint8,
) {
	return codec.DecodeUint8(1, v.GetField(0)),
		codec.DecodeUint8(1, v.GetField(1)),
		codec.DecodeUint8(1, v.GetField(2)),
		codec.DecodeUint8(1, v.GetField(3)),
		codec.DecodeUint8(1, v.GetField(4)),
		codec.DecodeUint8(1, v.GetField(5)),
		codec.DecodeUint8(1, v.GetField(6))
}

func (v *BoardRow) Set(
	landObjectType uint8,
	landPlayerId uint8,
	landObjectId uint8,
	hoverPlayerId uint8,
	hoverUnitId uint8,
	airPlayerId uint8,
	airUnitId uint8,
) {
	v.SetField(0, codec.EncodeUint8(1, landObjectType))
	v.SetField(1, codec.EncodeUint8(1, landPlayerId))
	v.SetField(2, codec.EncodeUint8(1, landObjectId))
	v.SetField(3, codec.EncodeUint8(1, hoverPlayerId))
	v.SetField(4, codec.EncodeUint8(1, hoverUnitId))
	v.SetField(5, codec.EncodeUint8(1, airPlayerId))
	v.SetField(6, codec.EncodeUint8(1, airUnitId))
}

func (v *BoardRow) GetLandObjectType() uint8 {
	data := v.GetField(0)
	return codec.DecodeUint8(1, data)
}

func (v *BoardRow) SetLandObjectType(value uint8) {
	data := codec.EncodeUint8(1, value)
	v.SetField(0, data)
}

func (v *BoardRow) GetLandPlayerId() uint8 {
	data := v.GetField(1)
	return codec.DecodeUint8(1, data)
}

func (v *BoardRow) SetLandPlayerId(value uint8) {
	data := codec.EncodeUint8(1, value)
	v.SetField(1, data)
}

func (v *BoardRow) GetLandObjectId() uint8 {
	data := v.GetField(2)
	return codec.DecodeUint8(1, data)
}

func (v *BoardRow) SetLandObjectId(value uint8) {
	data := codec.EncodeUint8(1, value)
	v.SetField(2, data)
}

func (v *BoardRow) GetHoverPlayerId() uint8 {
	data := v.GetField(3)
	return codec.DecodeUint8(1, data)
}

func (v *BoardRow) SetHoverPlayerId(value uint8) {
	data := codec.EncodeUint8(1, value)
	v.SetField(3, data)
}

func (v *BoardRow) GetHoverUnitId() uint8 {
	data := v.GetField(4)
	return codec.DecodeUint8(1, data)
}

func (v *BoardRow) SetHoverUnitId(value uint8) {
	data := codec.EncodeUint8(1, value)
	v.SetField(4, data)
}

func (v *BoardRow) GetAirPlayerId() uint8 {
	data := v.GetField(5)
	return codec.DecodeUint8(1, data)
}

func (v *BoardRow) SetAirPlayerId(value uint8) {
	data := codec.EncodeUint8(1, value)
	v.SetField(5, data)
}

func (v *BoardRow) GetAirUnitId() uint8 {
	data := v.GetField(6)
	return codec.DecodeUint8(1, data)
}

func (v *BoardRow) SetAirUnitId(value uint8) {
	data := codec.EncodeUint8(1, value)
	v.SetField(6, data)
}

type Board struct {
	dsSlot lib.DatastoreSlot
}

func NewBoard(ds lib.Datastore) *Board {
	dsSlot := ds.Get(BoardDefaultKey())
	return &Board{dsSlot}
}

func NewBoardFromSlot(dsSlot lib.DatastoreSlot) *Board {
	return &Board{dsSlot}
}
func (m *Board) Get(
	x uint16,
	y uint16,
) *BoardRow {
	dsSlot := m.dsSlot.Mapping().GetNested(
		codec.EncodeUint16(2, x),
		codec.EncodeUint16(2, y),
	)
	return NewBoardRow(dsSlot)
}
