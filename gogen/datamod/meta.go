/* Autogenerated file. Do not edit manually. */

package datamod

import (
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/concrete/codegen/datamod/codec"
	"github.com/ethereum/go-ethereum/concrete/crypto"
	"github.com/ethereum/go-ethereum/concrete/lib"
	"github.com/holiman/uint256"
)

// Reference imports to suppress errors if they are not used.
var (
	_ = common.Big1
	_ = codec.EncodeAddress
	_ = uint256.NewInt
)

// var (
//	MetaDefaultKey = crypto.Keccak256([]byte("datamod.v1.Meta"))
// )

func MetaDefaultKey() []byte {
	return crypto.Keccak256([]byte("datamod.v1.Meta"))
}

type MetaRow struct {
	lib.DatastoreStruct
}

func NewMetaRow(dsSlot lib.DatastoreSlot) *MetaRow {
	sizes := []int{2, 2, 1, 1, 1, 1, 1, 4}
	return &MetaRow{*lib.NewDatastoreStruct(dsSlot, sizes)}
}

func (v *MetaRow) Get() (
	boardWidth uint16,
	boardHeight uint16,
	playerCount uint8,
	unitPrototypeCount uint8,
	buildingPrototypeCount uint8,
	isInitialized bool,
	hasStarted bool,
	creationBlockNumber uint32,
) {
	return codec.DecodeUint16(2, v.GetField(0)),
		codec.DecodeUint16(2, v.GetField(1)),
		codec.DecodeUint8(1, v.GetField(2)),
		codec.DecodeUint8(1, v.GetField(3)),
		codec.DecodeUint8(1, v.GetField(4)),
		codec.DecodeBool(1, v.GetField(5)),
		codec.DecodeBool(1, v.GetField(6)),
		codec.DecodeUint32(4, v.GetField(7))
}

func (v *MetaRow) Set(
	boardWidth uint16,
	boardHeight uint16,
	playerCount uint8,
	unitPrototypeCount uint8,
	buildingPrototypeCount uint8,
	isInitialized bool,
	hasStarted bool,
	creationBlockNumber uint32,
) {
	v.SetField(0, codec.EncodeUint16(2, boardWidth))
	v.SetField(1, codec.EncodeUint16(2, boardHeight))
	v.SetField(2, codec.EncodeUint8(1, playerCount))
	v.SetField(3, codec.EncodeUint8(1, unitPrototypeCount))
	v.SetField(4, codec.EncodeUint8(1, buildingPrototypeCount))
	v.SetField(5, codec.EncodeBool(1, isInitialized))
	v.SetField(6, codec.EncodeBool(1, hasStarted))
	v.SetField(7, codec.EncodeUint32(4, creationBlockNumber))
}

func (v *MetaRow) GetBoardWidth() uint16 {
	data := v.GetField(0)
	return codec.DecodeUint16(2, data)
}

func (v *MetaRow) SetBoardWidth(value uint16) {
	data := codec.EncodeUint16(2, value)
	v.SetField(0, data)
}

func (v *MetaRow) GetBoardHeight() uint16 {
	data := v.GetField(1)
	return codec.DecodeUint16(2, data)
}

func (v *MetaRow) SetBoardHeight(value uint16) {
	data := codec.EncodeUint16(2, value)
	v.SetField(1, data)
}

func (v *MetaRow) GetPlayerCount() uint8 {
	data := v.GetField(2)
	return codec.DecodeUint8(1, data)
}

func (v *MetaRow) SetPlayerCount(value uint8) {
	data := codec.EncodeUint8(1, value)
	v.SetField(2, data)
}

func (v *MetaRow) GetUnitPrototypeCount() uint8 {
	data := v.GetField(3)
	return codec.DecodeUint8(1, data)
}

func (v *MetaRow) SetUnitPrototypeCount(value uint8) {
	data := codec.EncodeUint8(1, value)
	v.SetField(3, data)
}

func (v *MetaRow) GetBuildingPrototypeCount() uint8 {
	data := v.GetField(4)
	return codec.DecodeUint8(1, data)
}

func (v *MetaRow) SetBuildingPrototypeCount(value uint8) {
	data := codec.EncodeUint8(1, value)
	v.SetField(4, data)
}

func (v *MetaRow) GetIsInitialized() bool {
	data := v.GetField(5)
	return codec.DecodeBool(1, data)
}

func (v *MetaRow) SetIsInitialized(value bool) {
	data := codec.EncodeBool(1, value)
	v.SetField(5, data)
}

func (v *MetaRow) GetHasStarted() bool {
	data := v.GetField(6)
	return codec.DecodeBool(1, data)
}

func (v *MetaRow) SetHasStarted(value bool) {
	data := codec.EncodeBool(1, value)
	v.SetField(6, data)
}

func (v *MetaRow) GetCreationBlockNumber() uint32 {
	data := v.GetField(7)
	return codec.DecodeUint32(4, data)
}

func (v *MetaRow) SetCreationBlockNumber(value uint32) {
	data := codec.EncodeUint32(4, value)
	v.SetField(7, data)
}

type Meta struct {
	dsSlot lib.DatastoreSlot
}

func NewMeta(ds lib.Datastore) *Meta {
	dsSlot := ds.Get(MetaDefaultKey())
	return &Meta{dsSlot}
}

func NewMetaFromSlot(dsSlot lib.DatastoreSlot) *Meta {
	return &Meta{dsSlot}
}
func (m *Meta) Get() *MetaRow {
	return NewMetaRow(m.dsSlot)
}
