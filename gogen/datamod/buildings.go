/* Autogenerated file. Do not edit manually. */

package datamod

import (
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/concrete/codegen/datamod/codec"
	"github.com/ethereum/go-ethereum/concrete/crypto"
	"github.com/ethereum/go-ethereum/concrete/lib"
	"github.com/holiman/uint256"
)

// Reference imports to suppress errors if they are not used.
var (
	_ = common.Big1
	_ = codec.EncodeAddress
	_ = uint256.NewInt
)

// var (
//	BuildingsDefaultKey = crypto.Keccak256([]byte("datamod.v1.Buildings"))
// )

func BuildingsDefaultKey() []byte {
	return crypto.Keccak256([]byte("datamod.v1.Buildings"))
}

type BuildingsRow struct {
	lib.DatastoreStructWithParent
}

func NewBuildingsRow(dsSlot lib.DatastoreSlot) *BuildingsRow {
	sizes := []int{2, 2, 1, 1, 1, 4}
	return &BuildingsRow{*lib.NewDatastoreStructWithParent(dsSlot, sizes, nil, nil)}
}

func NewBuildingsRowWithParent(dsSlot lib.DatastoreSlot, parent lib.Parent, rowKey lib.RowKey) *BuildingsRow {
	sizes := []int{2, 2, 1, 1, 1, 4}
	return &BuildingsRow{*lib.NewDatastoreStructWithParent(dsSlot, sizes, parent, rowKey)}
}

func (v *BuildingsRow) Get() (
	x uint16,
	y uint16,
	buildingType uint8,
	state uint8,
	integrity uint8,
	timestamp uint32,
) {
	return codec.DecodeUint16(2, v.GetField(0)),
		codec.DecodeUint16(2, v.GetField(1)),
		codec.DecodeUint8(1, v.GetField(2)),
		codec.DecodeUint8(1, v.GetField(3)),
		codec.DecodeUint8(1, v.GetField(4)),
		codec.DecodeUint32(4, v.GetField(5))
}

func (v *BuildingsRow) Set(
	x uint16,
	y uint16,
	buildingType uint8,
	state uint8,
	integrity uint8,
	timestamp uint32,
) {
	v.SetField(0, codec.EncodeUint16(2, x))
	v.SetField(1, codec.EncodeUint16(2, y))
	v.SetField(2, codec.EncodeUint8(1, buildingType))
	v.SetField(3, codec.EncodeUint8(1, state))
	v.SetField(4, codec.EncodeUint8(1, integrity))
	v.SetField(5, codec.EncodeUint32(4, timestamp))
}

func (v *BuildingsRow) GetX() uint16 {
	data := v.GetField(0)
	return codec.DecodeUint16(2, data)
}

func (v *BuildingsRow) SetX(value uint16) {
	data := codec.EncodeUint16(2, value)
	v.SetField(0, data)
}

func (v *BuildingsRow) GetY() uint16 {
	data := v.GetField(1)
	return codec.DecodeUint16(2, data)
}

func (v *BuildingsRow) SetY(value uint16) {
	data := codec.EncodeUint16(2, value)
	v.SetField(1, data)
}

func (v *BuildingsRow) GetBuildingType() uint8 {
	data := v.GetField(2)
	return codec.DecodeUint8(1, data)
}

func (v *BuildingsRow) SetBuildingType(value uint8) {
	data := codec.EncodeUint8(1, value)
	v.SetField(2, data)
}

func (v *BuildingsRow) GetState() uint8 {
	data := v.GetField(3)
	return codec.DecodeUint8(1, data)
}

func (v *BuildingsRow) SetState(value uint8) {
	data := codec.EncodeUint8(1, value)
	v.SetField(3, data)
}

func (v *BuildingsRow) GetIntegrity() uint8 {
	data := v.GetField(4)
	return codec.DecodeUint8(1, data)
}

func (v *BuildingsRow) SetIntegrity(value uint8) {
	data := codec.EncodeUint8(1, value)
	v.SetField(4, data)
}

func (v *BuildingsRow) GetTimestamp() uint32 {
	data := v.GetField(5)
	return codec.DecodeUint32(4, data)
}

func (v *BuildingsRow) SetTimestamp(value uint32) {
	data := codec.EncodeUint32(4, value)
	v.SetField(5, data)
}

type Buildings struct {
	dsSlot  lib.DatastoreSlot
	parent  lib.Parent
	tableId lib.TableId
}

func NewBuildings(ds lib.Datastore) *Buildings {
	dsSlot := ds.Get(BuildingsDefaultKey())
	return &Buildings{
		dsSlot:  dsSlot,
		parent:  nil,
		tableId: nil,
	}
}

func NewBuildingsWithParent(ds lib.Datastore, parent lib.Parent, tableId lib.TableId) *Buildings {
	t := NewBuildings(ds)
	t.parent = parent
	t.tableId = tableId
	return t
}

func NewBuildingsFromSlot(dsSlot lib.DatastoreSlot) *Buildings {
	return &Buildings{dsSlot: dsSlot}
}

func (m *Buildings) Get(
	playerId uint8,
	buildingId uint8,
) *BuildingsRow {
	dsSlot := m.dsSlot.Mapping().GetNested(
		codec.EncodeUint8(1, playerId),
		codec.EncodeUint8(1, buildingId),
	)
	return NewBuildingsRowWithParent(dsSlot, m, lib.RowKey{
		playerId, buildingId,
	})
}

func (m *Buildings) SetFieldCallback(tableId lib.TableId, rowKey lib.RowKey, columnIndex int, value []byte) {
	if m.parent != nil {
		m.parent.SetFieldCallback(m.tableId, rowKey, columnIndex, value)
	}
}
