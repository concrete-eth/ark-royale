/* Autogenerated file. Do not edit manually. */

package datamod

import (
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/concrete/codegen/datamod/codec"
	"github.com/ethereum/go-ethereum/concrete/crypto"
	"github.com/ethereum/go-ethereum/concrete/lib"
	"github.com/holiman/uint256"
)

// Reference imports to suppress errors if they are not used.
var (
	_ = common.Big1
	_ = codec.EncodeAddress
	_ = uint256.NewInt
)

// var (
//	UnitsDefaultKey = crypto.Keccak256([]byte("datamod.v1.Units"))
// )

func UnitsDefaultKey() []byte {
	return crypto.Keccak256([]byte("datamod.v1.Units"))
}

type UnitsRow struct {
	lib.DatastoreStruct
}

func NewUnitsRow(dsSlot lib.DatastoreSlot) *UnitsRow {
	sizes := []int{2, 2, 1, 1, 1, 1, 4, 8, 8, 1, 1}
	return &UnitsRow{*lib.NewDatastoreStruct(dsSlot, sizes)}
}

func (v *UnitsRow) Get() (
	x uint16,
	y uint16,
	unitType uint8,
	state uint8,
	load uint8,
	integrity uint8,
	timestamp uint32,
	command uint64,
	commandExtra uint64,
	commandMeta uint8,
	isPreTicked bool,
) {
	return codec.DecodeUint16(2, v.GetField(0)),
		codec.DecodeUint16(2, v.GetField(1)),
		codec.DecodeUint8(1, v.GetField(2)),
		codec.DecodeUint8(1, v.GetField(3)),
		codec.DecodeUint8(1, v.GetField(4)),
		codec.DecodeUint8(1, v.GetField(5)),
		codec.DecodeUint32(4, v.GetField(6)),
		codec.DecodeUint64(8, v.GetField(7)),
		codec.DecodeUint64(8, v.GetField(8)),
		codec.DecodeUint8(1, v.GetField(9)),
		codec.DecodeBool(1, v.GetField(10))
}

func (v *UnitsRow) Set(
	x uint16,
	y uint16,
	unitType uint8,
	state uint8,
	load uint8,
	integrity uint8,
	timestamp uint32,
	command uint64,
	commandExtra uint64,
	commandMeta uint8,
	isPreTicked bool,
) {
	v.SetField(0, codec.EncodeUint16(2, x))
	v.SetField(1, codec.EncodeUint16(2, y))
	v.SetField(2, codec.EncodeUint8(1, unitType))
	v.SetField(3, codec.EncodeUint8(1, state))
	v.SetField(4, codec.EncodeUint8(1, load))
	v.SetField(5, codec.EncodeUint8(1, integrity))
	v.SetField(6, codec.EncodeUint32(4, timestamp))
	v.SetField(7, codec.EncodeUint64(8, command))
	v.SetField(8, codec.EncodeUint64(8, commandExtra))
	v.SetField(9, codec.EncodeUint8(1, commandMeta))
	v.SetField(10, codec.EncodeBool(1, isPreTicked))
}

func (v *UnitsRow) GetX() uint16 {
	data := v.GetField(0)
	return codec.DecodeUint16(2, data)
}

func (v *UnitsRow) SetX(value uint16) {
	data := codec.EncodeUint16(2, value)
	v.SetField(0, data)
}

func (v *UnitsRow) GetY() uint16 {
	data := v.GetField(1)
	return codec.DecodeUint16(2, data)
}

func (v *UnitsRow) SetY(value uint16) {
	data := codec.EncodeUint16(2, value)
	v.SetField(1, data)
}

func (v *UnitsRow) GetUnitType() uint8 {
	data := v.GetField(2)
	return codec.DecodeUint8(1, data)
}

func (v *UnitsRow) SetUnitType(value uint8) {
	data := codec.EncodeUint8(1, value)
	v.SetField(2, data)
}

func (v *UnitsRow) GetState() uint8 {
	data := v.GetField(3)
	return codec.DecodeUint8(1, data)
}

func (v *UnitsRow) SetState(value uint8) {
	data := codec.EncodeUint8(1, value)
	v.SetField(3, data)
}

func (v *UnitsRow) GetLoad() uint8 {
	data := v.GetField(4)
	return codec.DecodeUint8(1, data)
}

func (v *UnitsRow) SetLoad(value uint8) {
	data := codec.EncodeUint8(1, value)
	v.SetField(4, data)
}

func (v *UnitsRow) GetIntegrity() uint8 {
	data := v.GetField(5)
	return codec.DecodeUint8(1, data)
}

func (v *UnitsRow) SetIntegrity(value uint8) {
	data := codec.EncodeUint8(1, value)
	v.SetField(5, data)
}

func (v *UnitsRow) GetTimestamp() uint32 {
	data := v.GetField(6)
	return codec.DecodeUint32(4, data)
}

func (v *UnitsRow) SetTimestamp(value uint32) {
	data := codec.EncodeUint32(4, value)
	v.SetField(6, data)
}

func (v *UnitsRow) GetCommand() uint64 {
	data := v.GetField(7)
	return codec.DecodeUint64(8, data)
}

func (v *UnitsRow) SetCommand(value uint64) {
	data := codec.EncodeUint64(8, value)
	v.SetField(7, data)
}

func (v *UnitsRow) GetCommandExtra() uint64 {
	data := v.GetField(8)
	return codec.DecodeUint64(8, data)
}

func (v *UnitsRow) SetCommandExtra(value uint64) {
	data := codec.EncodeUint64(8, value)
	v.SetField(8, data)
}

func (v *UnitsRow) GetCommandMeta() uint8 {
	data := v.GetField(9)
	return codec.DecodeUint8(1, data)
}

func (v *UnitsRow) SetCommandMeta(value uint8) {
	data := codec.EncodeUint8(1, value)
	v.SetField(9, data)
}

func (v *UnitsRow) GetIsPreTicked() bool {
	data := v.GetField(10)
	return codec.DecodeBool(1, data)
}

func (v *UnitsRow) SetIsPreTicked(value bool) {
	data := codec.EncodeBool(1, value)
	v.SetField(10, data)
}

type Units struct {
	dsSlot lib.DatastoreSlot
}

func NewUnits(ds lib.Datastore) *Units {
	dsSlot := ds.Get(UnitsDefaultKey())
	return &Units{dsSlot}
}

func NewUnitsFromSlot(dsSlot lib.DatastoreSlot) *Units {
	return &Units{dsSlot}
}
func (m *Units) Get(
	playerId uint8,
	unitId uint8,
) *UnitsRow {
	dsSlot := m.dsSlot.Mapping().GetNested(
		codec.EncodeUint8(1, playerId),
		codec.EncodeUint8(1, unitId),
	)
	return NewUnitsRow(dsSlot)
}
